@charset "UTF-8";
/**
 * @author Prénom Nom courriel
**/
/**
 * ------------------
 * TABLE DES MATIÈRES
 * ------------------
 * BIBLIOTHÈQUES (dans le dossier bower_components)
 ** Normalize
 ** Susy
 * UTILITAIRES
 ** variables
 ** mixins
 * BASE
 ** Charte typographique responsive
 *
 * ...
 */
/*** Utilitaires ***/
/**
 * @author Prénom Nom courriel
 * @todo ADAPTER ce fichier au besoin
 * ----------------------------
 * TABLE DES MATIÈRES - MIXINS
 * ----------------------------
 * base (BoxSizing, Clearfix)
 * accessibilité
 * typographie
 */
/******** Utilitaires de base (BoxSizing, Clearfix) *********/
/* BoxSizing */
/* Clearfix: pour contrer le problème des enfants flottants*/
@import url("https://fonts.googleapis.com/css?family=Lato|Playfair+Display&display=swap");
.cf:after {
  content: " ";
  display: table;
  clear: both;
}

/******** Utilitaires pour accessibilité *********/
.visuallyhidden,
.screen-reader-only {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.visuallyhidden.focusable:active, .visuallyhidden.focusable:focus,
.screen-reader-only.focusable:active,
.screen-reader-only.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  white-space: normal;
  width: auto;
}

/******** Utilitaires pour typographie *********/
/* Utilitaire de mise en page */
/**
 * @authors: Samuel Loranger <samuelloranger@gmail.com>, Olivier Papineau <olivier.12.papineau@gmail.com>
 * ------------------
 * TABLE DES MATIÈRES
 * ------------------
 * Polices de caractères
 * Palette de couleurs
 * Points de rupture
 **/
/** Polices de caractères **/
@font-face {
  font-family: 'Playfair Display', serif;
}

@font-face {
  font-family: 'Lato', sans-serif;
}

/** Palette de couleurs **/
/** Points de rupture **/
/* tablet, landscape iPad, lo-res laptops ands desktops */
/* hi-res laptops and desktops */
/* Points de rupture pour Bootstrap */
/*** Base ***/
/**
 * @author Prénom Nom courriel
 * @todo ADAPTER ce fichier selon le projet
**/
/**
 * --------------------------------------------------------
 * TABLE DES MATIÈRES - Typographie responsive (Mobile First)
 * --------------------------------------------------------
 * Base décimale
 * Hiérarchie responsive
 */
/** Importation des polices **/
/** Base décimale **/
html {
  font-size: 62.5%;
}

body {
  /* 16px pour toutes les largeurs d'écran */
  font-size: 16px !important;
  font-size: 1.6rem !important;
  /* facteur multiplicateur de la taille de la police 1.375x16 = 22 */
  line-height: 1.375;
}

@media (min-width: 768px) {
  body {
    line-height: 1.5;
  }
}

/** Hiérarchie responsive **/
/*  plus proche = plus petit  &  plus loin = plus grand */
h1, h2 {
  font-family: "Playfair Display", Arial-Black, sans-serif;
  font-weight: 900 !important;
}

h3, h4, h5 {
  font-weight: bold !important;
}

body, p, span, input, label, a, h3, h4, h5 {
  font-family: "Lato", Arial, serif;
}

label {
  font-size: 24px !important;
  font-size: 2.4rem !important;
}

a {
  color: #BC441E;
  text-decoration: none;
  transition: 0.15s ease-in-out;
}

a:hover, a visited {
  color: #EB3125;
}

/* TITRES NIVEAU 1 */
h1,
.h1 {
  /* = 32px */
  font-size: 50px !important;
  font-size: 5rem !important;
}

/* TITRES NIVEAU 2 */
h2,
.h2 {
  /* = 24px */
  font-size: 32px !important;
  font-size: 3.2rem !important;
}

@media (min-width: 600px) {
  h2,
  .h2 {
    /* = 32px */
    font-size: 36px !important;
    font-size: 3.6rem !important;
  }
}

/* TITRES NIVEAU 3 */
h3,
.h3 {
  /* = 18px */
  font-size: 21px !important;
  font-size: 2.1rem !important;
}

@media (min-width: 600px) {
  h3,
  .h3 {
    /* = 24px */
    font-size: 28px !important;
    font-size: 2.8rem !important;
  }
}

/* TITRES NIVEAU 4 */
h4,
.h4 {
  /* = 16px */
  font-size: 16px !important;
  font-size: 1.6rem !important;
}

@media (min-width: 600px) {
  h4,
  .h4 {
    /* = 18px */
    font-size: 18px !important;
    font-size: 1.8rem !important;
  }
}

@media (min-width: 1000px) {
  h4,
  .h4 {
    /* = 22px */
    font-size: 22px !important;
    font-size: 2.2rem !important;
  }
}

/*** Normalize ***/
/*! normalize.scss v0.1.0 | MIT License | based on git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/*** Modules ***/
/**
 * @author Nom Prénom <courriel>
 */
.conteneur-fluid {
  width: 100%;
}

.conteneur {
  max-width: 1000px;
  margin: 0 auto;
}

noscript p {
  width: 100%;
  background-color: #EB3125;
  text-align: center;
  color: white;
  font-family: "Playfair Display", Arial-Black, sans-serif;
  font-size: 20px !important;
  font-size: 2rem !important;
  margin: 0;
}

/**
 * @author Samuel Loranger
 */
header {
  background-color: #444;
  margin-bottom: 25px;
}

header .conteneur-header {
  padding: 22px 15px 22px 10px;
  display: flex;
}

header .conteneur-header .navigation {
  display: flex;
}

@media (min-width: 576px) {
  header .conteneur-header .navigation__mobile {
    display: none;
  }
}

header .conteneur-header .navigation__desktop {
  justify-content: space-between;
  width: 100%;
}

header .conteneur-header .navigation__desktop .logoTraces {
  width: 12%;
}

header .conteneur-header .navigation__desktop .logoTraces img {
  max-width: 100%;
}

header .conteneur-header .navigation__desktop .conteneurMenu {
  width: 100%;
  display: flex;
  flex-direction: column-reverse;
}

header .conteneur-header .navigation__desktop .conteneurMenu__menu {
  list-style-type: none;
  display: flex;
  justify-content: space-between;
  margin: 0;
}

header .conteneur-header .navigation__desktop .conteneurMenu__menu li {
  font-size: 13px !important;
  font-size: 1.3rem !important;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

@media (min-width: 992px) {
  header .conteneur-header .navigation__desktop .conteneurMenu__menu li {
    font-size: 14px !important;
    font-size: 1.4rem !important;
  }
}

@media (min-width: 1200px) {
  header .conteneur-header .navigation__desktop .conteneurMenu__menu li {
    font-size: 16px !important;
    font-size: 1.6rem !important;
  }
}

header .conteneur-header .navigation__desktop .conteneurMenu__menu li a {
  color: #E9B693;
  text-transform: uppercase;
  transition: 0.15s ease-in-out;
  text-decoration: none;
}

header .conteneur-header .navigation__desktop .conteneurMenu__menu li a:hover {
  color: white;
  text-decoration: none;
}

header .conteneur-header .navigation__desktop .conteneurMenu__menu li .icone {
  width: 25px;
  height: 25px;
  display: block;
  background-size: contain;
  background-repeat: no-repeat;
}

header .conteneur-header .navigation__desktop .conteneurMenu__menu li .icone__rechercher {
  background-image: url("../images/icones/icone-loupe.svg");
}

header .conteneur-header .navigation__desktop .conteneurMenu__menu li .icone__panier {
  background-image: url("../images/icones/icone-panier.svg");
}

/**
 * @author Nom Prénom <courriel>
 */
/*** Pages ***/
.accueil ul {
  list-style: none;
  padding: 0;
}

.accueil .nouveautes__vignette {
  margin-bottom: 20px;
}

.accueil .nouveautes__vignette__image {
  padding-right: 0;
}

.accueil .nouveautes__vignette__image img {
  height: auto;
  max-width: 100%;
}

.accueil .nouveautes__vignette__details {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  background-color: #EEE;
}

.accueil .nouveautes__vignette__details__titre {
  font-size: 18px !important;
}

.accueil .nouveautes__vignette__details__auteur {
  color: #008571;
  font-size: 12px !important;
}

.accueil .nouveautes__vignette__details__titre {
  margin-top: 5%;
}

.accueil .nouveautes__vignette__bouton_plus {
  background-color: #444;
  display: block;
  text-align: center;
  color: white;
  border-radius: 50px;
  padding: 7px;
}

.accueil .nouveautes__vignette__bouton_panier {
  background-color: #008571;
  display: block;
  text-align: center;
  color: white;
  border-radius: 50px;
  padding: 7px;
  margin: 5px 0 15px 0;
}

@media (min-width: 768px) and (max-width: 992px) {
  .accueil .nouveautes__vignette__details {
    max-height: 150px !important;
  }
  .accueil .nouveautes__vignette__details .boutons {
    margin-bottom: 7px;
  }
  .accueil .nouveautes__vignette__details__titre {
    font-size: 14px !important;
  }
  .accueil .nouveautes__vignette__details__auteur {
    margin-top: -7px;
    color: #008571;
    font-size: 10px !important;
  }
  .accueil .nouveautes__vignette__details__titre {
    margin-top: 5%;
  }
  .accueil .nouveautes__vignette__details__prix {
    font-size: 14px !important;
    margin-bottom: -10px;
  }
  .accueil .nouveautes__vignette__bouton_plus {
    font-size: 10px;
    padding: 5px;
  }
  .accueil .nouveautes__vignette__bouton_panier {
    padding: 5px;
    margin-top: 7px;
    font-size: 10px;
  }
}

.accueil .coupsCoeur__groupe__vignette {
  margin: 0 0 20px 0;
  position: relative;
  z-index: 0;
}

.accueil .coupsCoeur__groupe__vignette__image {
  width: 100%;
  height: 100%;
  position: relative;
}

.accueil .coupsCoeur__groupe__vignette__image__foreground {
  position: absolute;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.5);
  width: 100%;
  height: 100%;
  z-index: 998;
}

.accueil .coupsCoeur__groupe__vignette__image img {
  max-width: 100%;
}

.accueil .coupsCoeur__groupe__vignette__details {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  position: absolute;
  top: 5%;
  left: 10%;
  width: 80%;
  height: 90%;
  z-index: 999;
}

.accueil .coupsCoeur__groupe__vignette__details__titre {
  color: white;
}

.accueil .coupsCoeur__groupe__vignette__details__auteur {
  color: #FFE9D0;
}

.accueil .coupsCoeur__groupe__vignette__details__prix {
  color: white;
  font-size: 50px !important;
}

.accueil .coupsCoeur__groupe__vignette__boutons__bouton_plus {
  background-color: #FFE9D0;
  display: block;
  text-align: center;
  color: black;
  border-radius: 50px;
  padding: 7px;
}

.accueil .coupsCoeur__groupe__vignette__boutons__bouton_panier {
  background-color: #008571;
  display: block;
  text-align: center;
  color: white;
  border-radius: 50px;
  padding: 7px;
  margin: 5px 0 15px 0;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
